t = c(4,5,6,7,8,9,10,11,12)
w = c(3,3.5,5,8.5,12,18,26,38,41)
plot(t,w)
fit1 = lm(log(w)~t)
summary(fit1)
timevalues <- seq(0, 30, 0.1)
Counts.fit1 <- exp(predict(fit1,list(t=timevalues)))
plot(t, Counts.fit1,pch=16)
lines(timevalues, Counts.fit1,lwd=2, col = "red", xlab = "Time (s)", ylab = "Counts")
t = c(4,5,6,7,8,9,10,11,12)
w = c(3,3.5,5,8.5,12,18,26,38,41)
plot(t,w)
fit1 = lm(log(w)~t)
summary(fit1)
timevalues <- seq(0, 30, 0.1)
Counts.fit1 <- exp(predict(fit1,list(t=timevalues)))
plot(t, Counts.fit1,pch=16)
lines(timevalues, Counts.fit1,lwd=2, col = "red", xlab = "Time (s)", ylab = "Counts")
coef(fit1)
f = x +1
plot(f,x=1..2)
f = x +1
plot(f)
f = x +1
f(function (x) x +1)
f=(function (x) x +1)
plot(f)
f=function (x) x +1
plot(f)
f=function (x) 40 / 1 + 2*exp(-x)
plot(f)
f=function (x) 40 / 1 + 2*exp(x)
plot(f)
plot(f,x=0..40)
f=function (x) 40 / 1 + 2*exp(x)
plot(f,x=0..40)
plot(f,xlim=c(0,100))
plot(f,xlim=c(0,10))
f=function (x) 40 / 1 + exp(x)
plot(f,xlim=c(0,10))
f=function (x) 40 / (1 + exp(x))
plot(f,xlim=c(0,10))
f=function (x) 40 / (1 + exp(-x))
plot(f,xlim=c(0,10))
f=function (x) 40 / (1 + 0.001*exp(-x))
plot(f,xlim=c(0,10))
f=function (x) 40 / (1 + 4*exp(-x))
plot(f,xlim=c(0,10))
f=function (x) 40 / (1 + 40*exp(-x))
plot(f,xlim=c(0,10))
plot(f,xlim=c(0,40))
f=function (x) 40 / (1 + 4*exp(-x))
plot(f,xlim=c(0,40))
f=function (x) 6 / (1 + 20*exp(-x))
plot(f,xlim=c(0,40))
f=function (x) 6 / (1 + 20*exp(x))
plot(f,xlim=c(0,40))
f=function (x) 6 / (1 + 2*exp(x))
plot(f,xlim=c(0,40))
f=function (x) 6 / (4 + 2*exp(x))
plot(f,xlim=c(0,40))
f=function (x) 6 / (1 + 2*exp(x))
plot(f,xlim=c(0,40))
f=function (x) 6 / (1 + 0.01*exp(x))
plot(f,xlim=c(0,40))
t = c(4,5,6,7,8,9,10,11,12)
w = c(3,3.5,5,8.5,12,18,26,38,41)
plot(t,w)
fit1 = lm(log(w)~t)
summary(fit1)
timevalues <- seq(0, 30, 0.1)
Counts.fit1 <- exp(predict(fit1,list(t=timevalues)))
plot(t, Counts.fit1,pch=16)
lines(timevalues, Counts.fit1,lwd=2, col = "red", xlab = "Time (s)", ylab = "Counts")
t = c(4,5,6,7,8,9,10,11,12)
w = c(3,3.5,5,8.5,12,18,26,38,41)
plot(t,w)
fit1 = lm(log(w)~t)
summary(fit1)
timevalues <- seq(0, 30, 0.1)
Counts.fit1 <- exp(predict(fit1,list(t=timevalues)))
plot(t, Counts.fit1,pch=16)
lines(timevalues, Counts.fit1,lwd=2, col = "red", xlab = "Time (s)", ylab = "Counts")
fit1
plot(t, Counts.fit1,pch=16,xlim=c(0,12))
lines(timevalues, Counts.fit1,lwd=2, col = "red", xlab = "Time (s)", ylab = "Counts")
t = c(4,5,6,7,8,9,10,11,12)
w = c(3,3.5,5,8.5,12,18,26,38,41)
plot(t,w)
fit1 = lm(log(w)~t)
summary(fit1)
timevalues <- seq(0, 30, 0.1)
Counts.fit1 <- exp(predict(fit1,list(t=timevalues)))
plot(t, Counts.fit1,pch=16)
lines(timevalues, Counts.fit1,lwd=2, col = "red", xlab = "Time (s)", ylab = "Counts")
t = c(4,5,6,7,8,9,10,11,12)
w = c(3,3.5,5,8.5,12,18,26,38,41)
plot(t,w)
fit1 = lm(log(w)~t)
summary(fit1)
timevalues <- seq(0, 30, 0.1)
Counts.fit1 <- exp(predict(fit1,list(t=timevalues)))
plot(t, Counts.fit1,pch=16,xlim=c(0,12))
lines(timevalues, Counts.fit1,lwd=2, col = "red", xlab = "Time (s)", ylab = "Counts")
t = c(4,5,6,7,8,9,10,11,12)
w = c(3,3.5,5,8.5,12,18,26,38,41)
plot(t,w)
fit1 = lm(log(w)~t)
summary(fit1)
timevalues <- seq(0, 30, 0.1)
Counts.fit1 <- exp(predict(fit1,list(t=timevalues)))
plot(t, Counts.fit1,pch=16)
lines(timevalues, Counts.fit1,lwd=2, col = "red", xlab = "Time (s)", ylab = "Counts")
t = c(4,5,6,7,8,9,10,11,12)
w = c(3,3.5,5,8.5,12,18,26,38,41)
plot(t,w)
fit1 = lm(log(w)~t)
summary(fit1)
timevalues <- seq(0, 30, 0.1)
Counts.fit1 <- exp(predict(fit1,list(t=timevalues)))
plot(t, Counts.fit1,pch=16)
lines(timevalues, Counts.fit1,lwd=2, col = "red", xlab = "Time (s)", ylab = "Counts")
t = c(4,5,6,7,8,9,10,11,12)
w = c(3,3.5,5,8.5,12,18,26,38,41)
plot(t,w)
fit1 = lm(log(w)~t)
summary(fit1)
timevalues <- seq(0, 30, 0.1)
Counts.fit1 <- exp(predict(fit1,list(t=timevalues)))
plot(t, Counts.fit1,pch=16)
lines(timevalues, Counts.fit1,lwd=2, col = "red", xlab = "Time (s)", ylab = "Counts")
t = c(4,5,6,7,8,9,10,11,12)
w = c(3,3.5,5,8.5,12,18,26,38,41)
plot(t,w)
fit1 = lm(log(w)~t)
summary(fit1)
timevalues <- seq(0, 30, 0.1)
Counts.fit1 <- exp(predict(fit1,list(t=timevalues)))
plot(t, Counts.fit1,pch=16)
plot(t, Counts.fit1,pch=16)
t = c(4,5,6,7,8,9,10,11,12)
w = c(3,3.5,5,8.5,12,18,26,38,41)
plot(t,w)
fit1 = lm(log(w)~t)
summary(fit1)
timevalues <- seq(0, 30, 0.1)
Counts.fit1 <- exp(predict(fit1,list(t=timevalues)))
plot(t, Counts.fit1,pch=16)
lines(timevalues, Counts.fit1,lwd=2, col = "red", xlab = "Time (s)", ylab = "Counts")
t = c(4,5,6,7,8,9,10,11,12)
w = c(3,3.5,5,8.5,12,18,26,38,41)
plot(t,w)
fit1 = lm(log(w)~t)
summary(fit1)
timevalues <- seq(0, 30, 0.1)
Counts.fit1 <- exp(predict(fit1,list(t=timevalues)))
plot(t, Counts.fit1,pch=16)
lines(timevalues, Counts.fit1,lwd=2, col = "red", xlab = "Time (s)", ylab = "Counts")
predict(fit1,list(t=timevalues))
f=function (x) 6 / (1 + 0.01*exp(x))
plot(f,xlim=c(0,40))
f=function (x) exp(x*0.0334-1.96)
plot(f,xlim=c(0,40))
f=function (x) 0.5/(1+2*exp(-x))
plot(f,xlim=c(0,40))
f=function (x) 0.5/(1+20*exp(-x))
plot(f,xlim=c(0,40))
f=function (x) 0.5/(1+2000*exp(-x))
plot(f,xlim=c(0,40))
f=function (x) 0.5/(10+200*exp(-x))
plot(f,xlim=c(0,40))
f=function (x) 0.5/(10+2000*exp(-x))
plot(f,xlim=c(0,40))
f=function (x) 4/(10+2000*exp(-x))
plot(f,xlim=c(0,40))
f=function (x) 4/(1+2000*exp(-x))
plot(f,xlim=c(0,40))
f=function (x) 0.5/(1+2000*exp(-x))
plot(f,xlim=c(0,40))
f=function (x) 0.5/(1+2000000*exp(-x))
plot(f,xlim=c(0,40))
f=function (x) 0.5/(1+20000*exp(-x))
plot(f,xlim=c(0,40))
f=function (x) 0.5/(1+20000*exp(-x*2))
plot(f,xlim=c(0,40))
f=function (x) 0.5/(1+20000*exp(-x*20))
plot(f,xlim=c(0,40))
f=function (x) 0.5/(1+20000*exp(-x*0.1))
plot(f,xlim=c(0,40))
f=function (x) 0.5/(1+20000*exp(-x*0.4))
plot(f,xlim=c(0,40))
f=function (x) 0.5/(1+200*exp(-x*0.4))
plot(f,xlim=c(0,40))
install.packages("installr")
library("installr")
updateR()
# 1)
## Load data and plot it
# Load the whole dataset, the part we're training on and the one we're validating on
data = read.table("A3_power_short.txt",sep="\t",dec=",",header = TRUE)
data_train = read.table("A3_power_short_train.txt",sep="\t",dec=",",header = TRUE)
data_vali = read.table("A3_power_short_vali.txt",sep="\t",dec=",",header = TRUE)
plot(data$Power,type="p") # Plot all the data
k = c(1673:(1673+60))
lines(k,data_vali$Power, type = "p", pch=19,col="red") # Make the validation data red
plot(data_train$Power[100:200],type="l")
plot(diff(diff(data_train$Power,24),1)) # Plot transformed data
library("fpp")
# 1)
## Load data and plot it
# Load the whole dataset, the part we're training on and the one we're validating on
data = read.table("A3_power_short.txt",sep="\t",dec=",",header = TRUE)
source('~/Tidsrække/A3/power.R', echo=TRUE)
choose.dir()
# 1)
## Load data and plot it
# Load the whole dataset, the part we're training on and the one we're validating on
data = read.table("A3_power_short.txt",sep="\t",dec=",",header = TRUE)
setwd("C:\\Users\\andre\\OneDrive\\Dokumenter\\Tidsrække\\A3"
)
setwd("C:\\Users\\andre\\OneDrive\\Dokumenter\\Tidsrække\\A3")
# 1)
## Load data and plot it
# Load the whole dataset, the part we're training on and the one we're validating on
data = read.table("A3_power_short.txt",sep="\t",dec=",",header = TRUE)
# 1)
## Load data and plot it
# Load the whole dataset, the part we're training on and the one we're validating on
data = read.table("A3_power_short.txt",sep="\t",dec=",",header = TRUE)
data_train = read.table("A3_power_short_train.txt",sep="\t",dec=",",header = TRUE)
data_vali = read.table("A3_power_short_vali.txt",sep="\t",dec=",",header = TRUE)
plot(data$Power,type="p") # Plot all the data
k = c(1673:(1673+60))
lines(k,data_vali$Power, type = "p", pch=19,col="red") # Make the validation data red
plot(data_train$Power[100:200],type="l")
plot(diff(diff(data_train$Power,24),1)) # Plot transformed data
ts = ts(data_train$Power,frequency=168)
autofit = auto.arima(ts,d=1,D=1,trace = TRUE,stepwise = FALSE, approximation = TRUE)
autofit
fit4 = arima(ts, order=c(2,1,3), seasonal=c(0,1,2),method = "CSS")
fit4 = arima(ts, order=c(2,1,3), seasonal=c(0,1,2),method = "CSS-ML")
fit4 = arima(ts, order=c(2,1,3), seasonal=c(0,1,2),method = "ML")
# 3)
## Model selection procedure
ts = ts(data_train$Power,frequency=24)
fit4 = arima(ts, order=c(2,1,3), seasonal=c(0,1,2),method = "CSS")
my.tsdiag(fit4)
fit4
aic = length(ts)*log(fit4$sigma2)+(2*7)
aic
fit4
aic_marcus = (2*7) - 2*log(fit4$loglik)
aic_marcus
fit4$loglik
aic_marcus = (2*7) - 2*fit4$loglik
2fit4$loglik
aic_marcus
autofit
fit11 = arima(ts, order=c(4,1,4), seasonal=c(1,1,1),method = "CSS")
my.tsdiag(fit11)
my.tsdiag <- function(dat,   nlag = 50){
if(class(dat) == "Arima")
dat <- dat$residuals
oldpar <- par(mfrow=c(4,1), mgp=c(2,0.7,0), mar=c(3,3,1.5,1))
dat=ts(dat)
on.exit(par(oldpar))
plot(dat)
acf(dat,lag.max = 50)
pacf(dat,lag.max = 50)
pval <- sapply(1:nlag, function(i) Box.test(dat, i, type = "Ljung-Box")$p.value)
plot(1L:nlag, pval, xlab = "lag", ylab = "p value", ylim = c(0,1), main = "p values for Ljung-Box statistic")
abline(h = 0.05, lty = 2, col = "blue")
}
fit11 = arima(ts, order=c(4,1,4), seasonal=c(1,1,1),method = "CSS")
my.tsdiag(fit11)
fit12 = arima(ts, order=c(3,1,4), seasonal=c(1,1,1),method = "CSS")
my.tsdiag(fit12)
fit13 = arima(ts, order=c(3,1,4), seasonal=c(0,1,2),method = "CSS")
my.tsdiag(fit13)
fit3 = arima(ts, order=c(2,1,4), seasonal=c(0,1,2),method = "CSS")
my.tsdiag(fit3)
fit13 = arima(ts, order=c(3,1,4), seasonal=c(0,1,2),method = "CSS")
my.tsdiag(fit13)
fit3 = arima(ts, order=c(2,1,4), seasonal=c(0,1,2),method = "CSS")
my.tsdiag(fit3)
fit4 = arima(ts, order=c(2,1,3), seasonal=c(0,1,2),method = "CSS")
my.tsdiag(fit4)
fit11 = arima(ts, order=c(4,1,4), seasonal=c(1,1,1),method = "CSS")
my.tsdiag(fit11)
aic_marcus = (2*7) - 2*fit4$loglik
autofit
# 3)
## Model selection procedure
ts = ts(data_train$Power,frequency=24)
autofit = auto.arima(ts,d=1,D=1,trace = TRUE)
autofit
plot(forecast(fit4))
fit4 = Arima(ts, order=c(2,1,3), seasonal=c(0,1,2),method = "CSS")
plot(predict(fit4))
library("fpp")
plot(predict(fit4))
plot(forecast(fit4))
forecast(fit4)
help("forecast")
data_vali$Power
plot(c(1:98),forecast(fit4)$Forecast[1:98])
pred = forecast(fit4)
pred
pred$lower
plot(forecast(fit4))
View(pred)
pred
View(pred)
pred$mean
plot(1,pred$mean)
plot(pred$mean)
View(pred)
pred$lower
pred$lower[2]
pred$lower[:2]
pred$lower[:,2]
pred$lower[;,2]
pred$lower[,2]
lines(pred$lower[,2])
lines(pred$lower[,2],col="red")
lines(pred$upper[,2],col="red")
lines(data_vali$Power)
pred$lower[,2]
help("forecast")
length(data_vali$Power)
pred = forecast(fit4,h=61)
plot(pred$mean)
lines(pred$lower[,2],col="red")
lines(pred$upper[,2],col="red")
lines(data_vali$Power)
lines(c(1:68),data_vali$Power)
lines(c(1:69),data_vali$Power)
length(pred$lower)
length(pred$lower[,2])
length(1:68)
plot(c(1:68),pred$mean)
plot(c(1:68),pred$mean)
pred = forecast(fit4,h=61)
plot(c(1:61),pred$mean)
lines(c(1:61),pred$lower[,2],col="red")
lines(c(1:61),pred$upper[,2],col="red")
lines(c(1:61),data_vali$Power)
plot(c(1:61),pred$mean)
plot(c(1:61),pred$mean,style="l")
plot(c(1:61),pred$mean,style="l")
plot(c(1:61),pred$mean,style="l")
plot(c(1:61),pred$mean,type="l")
lines(c(1:61),pred$lower[,2],col="red")
lines(c(1:61),pred$upper[,2],col="red")
lines(c(1:61),data_vali$Power,col="green",type="P",pch=18)
lines(c(1:61),data_vali$Power,col="green",type="p",pch=19)
plot(c(1:61),pred$mean,type="l",ylim=c(min(data_vali$Power),max(data_vali$Power)))
lines(c(1:61),pred$lower[,2],col="green")
lines(c(1:61),pred$upper[,2],col="green")
lines(c(1:61),data_vali$Power,col="green",type="p",pch=19)
View(pred)
pred[["mean"]]
pred[["lower"]]
pred[["lower"]][1,6,12,24,48]
pred[["lower"]][c(1,6,12,24,48)]
pred[["lower"]][c(1+61,6+61,12+61,24+61,48+61)]
pred[["upper"]][c(1+61,6+61,12+61,24+61,48+61)]
data_vali$Power[1,6,12,24,48]
data_vali$Power[c(1,6,12,24,48)]
fit4
help("read.csv")
read.csv("FINALDATA")
read.csv("..\\viKnepperDem\\FINALDATA")
getcwd
getcwd()
help("cwd")
getcwd()
getwd()
setwd("C:/Users/andre/OneDrive/Dokumenter/Tidsrække/A3")
setwd("C:/Users/andre/Documents/Machine Learning/Projects/Project1/viKnepperDem")
read.xlsx("FINALDATA")
read.csv("FINALDATAcsv.csv")
data = read.csv("FINALDATAcsv.csv")
setwd("C:/Users/andre/Documents/Machine Learning/Projects/Project1/viKnepperDem")
data = read.csv("FINALDATAcsv.csv")
View(data)
data.matrix()
install.packages("readx1")
data = read.csv("FINALDATAR.csv")
View(data)
data = read.csv("FINALDATAR.csv")
View(data)
View(data)
plot(data$DateTime_Out,data$Sum_Duration)
class(data$DateTime_Out)
class(data$Sum_Duration)
class(data$DateTime_Out)
View(data)
View(data)
data[Line==1]
data[Line=1]
data['Line'=1]
data['Line']
data['Line'=1]
data['Line'==1]
test = data['Line'==1]
test = data[data$Line=1]
test = data[data$Line==1]
test = data[data$Line==1]
plot(data$Sum_Duration)
test = data[which(data$Line==1)]
test = data[which(data$Line==1),]
test1 = data[which(data$Line==1),]
test2 = data[which(data$Line==2),]
length(test1)+length(test2)
plot(test1$Sum_Duration)
plot(c(1:100),test1$Sum_Duration)
plot(c(1:100),test1$Sum_Duration[1:100])
test1 = data[which(data$Line==1),which(data$Sum_Duration<20000),]
test1 = data[which(data$Line==1),which(data$Sum_Duration<20000),]
test1 = data[which(data$Line==1),]
test1 = test1[which(data$Sum_Duration<20000)]
test1 = test1[which(data$Sum_Duration<20000),]
test2 = data[which(data$Line==2),]
plot(c(1:100),test1$Sum_Duration[1:100])
test1 = test1[which(data$Sum_Duration<20000),]
test2 = data[which(data$Line==2),]
plot(c(1:100),test1$Sum_Duration[1:100])
test1 = data[which(data$Line==1),]
test1 = test1[which(test1$Sum_Duration<20000),]
test2 = data[which(data$Line==2),]
plot(c(1:100),test1$Sum_Duration[1:100])
plot(data$DateTime_Out[1:100],test1$Sum_Duration[1:100])
plot(test1$DateTime_Out[1:100],test1$Sum_Duration[1:100])
test1$DateTime_Out[1]
length(test1$DateTime_Out[1])
plot(test1$DateTime_Out[1:3],test1$Sum_Duration[1:3])
plot(test1$Sum_Duration[1:3])
plot(test1$Sum_Duration[1:100])
test1 = data[which(data$Line==1),]
test1 = test1[which(test1$Sum_Duration<20000),]
test2 = data[which(data$Line==2),]
plot(test1$Sum_Duration[1:100])
plot(test1$Sum_Duration[1:48])
plot(test1$Sum_Duration[1:48])
plot(test1$Staff[1:48])
plot(test1$Staff[1:480])
plot(test1$Staff[1:2000])
plot(test2$Staff[1:2000])
plot(test1$Staff[1:2000])
plot(test2$Staff[1:2000])
plot(test1$Staff[1:2000])
plot(test2$Staff[1:2000])
plot(test1$Staff[1:2000])
plot(test2$Staff[1:2000])
plot(test1$Staff[1:length(test1$Staff)])
plot(test2$Staff[1:length(test1$Staff)])
test1 = test2[which(test2$Sum_Duration<20000),]
plot(test1$Staff[1:length(test1$Staff)])
plot(test2$Staff[1:length(test1$Staff)])
plot(test1$Staff[1:length(test1$Staff)])
plot(test2$Staff[1:length(test1$Staff)])
test1 = data[which(data$Line==1),]
test1 = test1[which(test1$Sum_Duration<20000),]
test2 = data[which(data$Line==2),]
test2 = test2[which(test2$Sum_Duration<20000),]
plot(test1$Staff[1:length(test1$Staff)])
plot(test2$Staff[1:length(test1$Staff)])
test1$DateTime_Out
install.packages("ggplot")
library("ggplot")
install.packages("ggplot")
library("ggplot")
version
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot")
library("ggplot2")
library("ggplot2")
plot(test1$Scrap[1:length(test1$Staff)])
mean(test1$Scrap)
plot(test2$Staff[1:length(test1$Staff)])
test_scrap = data[which(data$Scrap<0),]
test1 = test1[which(test1$Sum_Duration<200000),]
test1 = test1[which(test1$Sum_Duration<200000),]
test2 = test2[which(test2$Sum_Duration<200000),]
test1 = test1[which(test1$Sum_Duration<200000),]
plot(test2$Staff[1:length(test1$Staff)])
plot(test1$Staff[1:length(test1$Staff)])
max(data$Staff)
max(data$Staff)
plot(test1$Error_Count[1:length(test1$Staff)])
plot(test1$Error_Count[1:100])
plot(test1$Error_Count[1:24])
plot(test1$Error_Count[1:48])
plot(test1$Error_Count[1:96])
plot(test1$Error_Count[1:96*2])
plot(test1$Error_Count[1:96*4])
plot(test1$Sum_Duration[1:96*4])
plot(test1$Sum_Duration[1:96])
plot(test1$Scrap[1:96])
plot(test1$Scrap[1*96:4*96])
plot(test1$Scrap[1*96:(4*96)])
library("ggplot2")
install.packages("ggplot2")
library("ggplot2")
plot(test1$Error_Count[1*96:(4*96)])
plot(test1$Error_Count[(1*96):(4*96)])
plot(test1$Error_Count[(96):(4*96)])
plot(test1$Feed)
plot(test1$OutputGood~test1$Feed)
plot(test1$OutputGood~test1$Error_Count)
